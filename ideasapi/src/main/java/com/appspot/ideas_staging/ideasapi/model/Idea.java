/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-04-08 17:16:44 UTC)
 * on 2016-04-24 at 06:37:28 UTC 
 * Modify at your own risk.
 */

package com.appspot.ideas_staging.ideasapi.model;

/**
 * Model definition for Idea.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the ideasapi. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Idea extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String created;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> hashtags;

  /**
   * ProtoRPC container for users.User objects. Attributes: email: String; The email of the user.
   * auth_domain: String; The auth domain of the user. user_id: String; The user ID.
   * federated_identity: String; The federated identity of the user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UserMessage owner;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCreated() {
    return created;
  }

  /**
   * @param created created or {@code null} for none
   */
  public Idea setCreated(java.lang.String created) {
    this.created = created;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * @param description description or {@code null} for none
   */
  public Idea setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getHashtags() {
    return hashtags;
  }

  /**
   * @param hashtags hashtags or {@code null} for none
   */
  public Idea setHashtags(java.util.List<java.lang.String> hashtags) {
    this.hashtags = hashtags;
    return this;
  }

  /**
   * ProtoRPC container for users.User objects. Attributes: email: String; The email of the user.
   * auth_domain: String; The auth domain of the user. user_id: String; The user ID.
   * federated_identity: String; The federated identity of the user.
   * @return value or {@code null} for none
   */
  public UserMessage getOwner() {
    return owner;
  }

  /**
   * ProtoRPC container for users.User objects. Attributes: email: String; The email of the user.
   * auth_domain: String; The auth domain of the user. user_id: String; The user ID.
   * federated_identity: String; The federated identity of the user.
   * @param owner owner or {@code null} for none
   */
  public Idea setOwner(UserMessage owner) {
    this.owner = owner;
    return this;
  }

  @Override
  public Idea set(String fieldName, Object value) {
    return (Idea) super.set(fieldName, value);
  }

  @Override
  public Idea clone() {
    return (Idea) super.clone();
  }

}
